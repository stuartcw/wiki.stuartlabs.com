{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stuart\u2019s Knowledge and Opinion Repository","text":"<p>For this you keep a lab notebook. Everything gets written down, formally,   so that you know at all times where you are, where you\u2019ve been, where you\u2019re   going and where you want to get. In scientific work and electronics technology   this is necessary because otherwise the problems get so complex you get lost   in them and confused and forget what you know and what you don\u2019t know and   have to give up.</p> <p>Zen and the Art of Motorcycle Maintenance: An Inquiry Into Values   Robert M. Pirsig</p>","tags":["MkDocs","Documentation","Index"]},{"location":"#articles","title":"Articles","text":"<ul> <li> A new way of coding</li> <li> Todo</li> </ul>","tags":["MkDocs","Documentation","Index"]},{"location":"#mkdocs","title":"Mkdocs","text":"<ul> <li>Mkdocs </li> <li>Extending Mkdocs</li> </ul> <p>In case I am looking for where this site is kept, it is at <code>~/Documents/Wiki</code></p>","tags":["MkDocs","Documentation","Index"]},{"location":"#python","title":"Python","text":"<ul> <li> Pretty Maps use OpenStreetmaps to make pretty maps from an address.</li> </ul>","tags":["MkDocs","Documentation","Index"]},{"location":"#random-quotes","title":"Random Quotes","text":"<ul> <li>Generating Random Quotes - Made before I knew about ChatGPT and uses a simplle statistical language model.</li> </ul>","tags":["MkDocs","Documentation","Index"]},{"location":"#keybase","title":"Keybase","text":"<ul> <li>Keybase API Keybase CHAT Api example.</li> </ul>","tags":["MkDocs","Documentation","Index"]},{"location":"#to-write","title":"To Write","text":"<ul> <li>I accidentally made something interesting. A light that comes on at dawn.</li> <li>How I generate random quotes.</li> <li>How I use Buffer on the iPhone and shortcuts to auotmatically tweet. </li> <li>What is sed and why you might want to learn it.</li> <li>What is awk and why you might want to learn it.</li> <li>What is jq and why you might want to learn it.</li> </ul>","tags":["MkDocs","Documentation","Index"]},{"location":"#back-burner-projects","title":"Back Burner Projects","text":"<ul> <li> I always wanted to write an adventure game.</li> </ul> <p>Hello world! from <code>on_page_markdown.py</code></p>","tags":["MkDocs","Documentation","Index"]},{"location":"A_New_Way_Of_Coding/","title":"A New Way Of Coding","text":"<p>I have been looking for a way of coding and documentation for a long time. This is my current coding flow.</p> <ol> <li>Write some code and get it working.</li> <li>Write a Markdown document about the code and use include tags in that document to include the code in the document.</li> </ol>"},{"location":"A_New_Way_Of_Coding/#where-i-am-going","title":"Where I am going","text":"<ol> <li>In the past I made a script to convert Python code into Markdown, including Markdown formatted comments in the code. I may dig this out or rewrite it to make the source code more like a literate program.</li> <li>Make sure that all these coding programs are checked into Git.</li> <li>Make the process of generating the documentation more automatic.</li> <li>Make an index to the code.</li> <li>Make sure the actual source documentation and extensions is also included and checked in. Hello world! from <code>on_page_markdown.py</code></li> </ol>"},{"location":"Adventure/","title":"Adventure","text":"<p>I always want to make an adventure game. This seems like a good library.</p> <p><pre><code>#!/usr/local/bin/python3\n\nfrom adventurelib import *\nfrom dataclasses import dataclass, field\nimport sys\n\n@dataclass\nclass Room:\n    description: str = \"An empty room\"\n    items: list[int]=field(default_factory=list)\n\ncurrentRoom=Room()\ninventory=[\"an old sausage\",\"a golden key\"]\n\n@when(\"exit\")\ndef exit():\n    sys.exit()\n\n@when(\"look\")\ndef look():\n    say(f\"You see {currentRoom.description}.\")\n\n@when(\"scream\")\ndef scream():\n    print(\"You unleash a piercing shriek that reverberates around you.\")\n\n@when(\"brush teeth\")\ndef brush_teeth():\n    print(\"You brush your teeth. They feel clean.\")\n\n@when(\"take THING\")\ndef take(thing):\n    print(f\"You take the {thing}.\")\n    inventory.append(thing)\n\n@when(\"drop THING\")\ndef drop(thing):\n    say(f\"You drop the {thing}.\")\n    inventory.remove(thing)\n\n@when(\"inventory\")\ndef show_inventory():\n    say(\"You are carrying \"+(\", \".join(inventory[:-1]))+f\" and {inventory[-1]}.\")\n\n@when('enter mirror')\ndef enter_mirror():\n    if get_context() == 'wonderland':\n        say('There is no mirror here.')\n    else:\n        set_context('wonderland')\n        say('You step into the silvery surface, which feels wet and cool.')\n        say('You realise that clicking your heels will let you return.')\n\n\n@when('click heels', context='wonderland')\ndef click_heels():\n    set_context(None)\n    say('The moment your heels touch the world rearranges around you.')\n\nstart()\n</code></pre> Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Extending_Mkdocs/","title":"Extending MkDocs","text":"<p>I found a couple of ways to extend MKDocs but not much documentation.</p>"},{"location":"Extending_Mkdocs/#mkdocs-simple-hooks","title":"mkdocs-simple-hooks","text":"<p>Mkdocs-simple-hooks</p> <p>You can use this plugin to create simple hooks for mkdocs without having to create a separate plugin package. Just define a function and register it as a hook in the mkdocs.yml. The function shall have the same API as the desired hook. </p> <p>mkdocs-simple-hooks</p> <p>e.g. \u201cHello world!\u201d can be added to every page by hooking MkDoc\u2019s <code>on_page_markdown</code> Global Event  callback.</p> <p>Simply make a file <code>page_markdown.py</code> and add the following to <code>mkdocs.yml</code> <pre><code>plugins:\n    - search\n    - mkdocs-simple-hooks:\n          hooks:\n              on_env: \"on_env:print_env\"\n              on_page_markdown: \"on_page_markdown:hello_world\"\n</code></pre></p> <pre><code>def hello_world(markdown,page,config,files):\n    return markdown + \"\\n*Hello world!*\"\n</code></pre>"},{"location":"Extending_Mkdocs/#mkdocs-macros","title":"mkdocs-macros","text":"<p>Mkdocs-macros</p> <p>mkdocs-macros-plugin is a plugin/framework that makes it easy for contributors of an MkDocs website to produce richer and more beautiful pages. It can do two things:</p> <p>Transforming the markdown pages into Jinja2 templates that:  * Use environment or custom variables,  * Call pre-defined or custom macros,  * Exploit standard or custom filters  * Replacing MkDocs plugins for a wide range of tasks: e.g. manipulating the navigation, adding files after the html pages have already been generated etc.</p> <p>mkdocs-macros</p> <p>You can extend MkDocs with code like:</p> <pre><code>import sys \nimport html\nimport os\n\nMARKDOWN_CODE=\"\\n`\"+\"`\"+\"`\\n\"\n\ndef define_env(env):\n    \"Hook function\"\n\n    @env.macro\n    def mymacro():\n      with open(\"main.py\") as this_python_file:\n          lines=\"\".join(this_python_file.readlines())\n\n      return \"You can extend MkDocs with code like:\\n\"+MARKDOWN_CODE+lines+MARKDOWN_CODE\n\n\n    @env.macro\n    def code_from_file(path: str, flavor: str = \"\"):\n        \"\"\"\n        Load code from a file and save as a preformatted code block.\n        If a flavor is specified, it's passed in as a hint for syntax highlighters.\n\n        Example usage in markdown:\n\n            {{code_from_file(\"code/myfile.py\", \"python\")}}\n\n        \"\"\"\n        docs_dir =\"includes\"\n        path = os.path.abspath(os.path.join(docs_dir, path))\n        if not os.path.exists(path):\n            return f\"\"\"&lt;b&gt;File not found: {path}&lt;/b&gt;\"\"\"\n        with open(path, \"r\") as f:\n            return (\n                #f\"\"\"&lt;pre&gt;&lt;code class=\"{flavor}\"&gt;{html.escape(f.read())}&lt;/code&gt;&lt;/pre&gt;\"\"\"\n                f\"```{flavor}\\n\"+f.read()+\"\\n```\"\n            )\n\n    @env.macro\n    def external_markdown(fn: str):\n        \"\"\"\n        Load markdown from files external to the mkdocs root path.\n        Example usage in markdown:\n\n            {{external_markdown(\"../../README.md\")}}\n\n        \"\"\"\n        docs_dir = env[\"project_dir\"]+\"/includes\"\n        fn = os.path.abspath(os.path.join(docs_dir, fn))\n        if not os.path.exists(fn):\n            return f\"\"\"&lt;b&gt;File not found: {fn}&lt;/b&gt;\"\"\"\n        with open(fn, \"r\") as f:\n            return f.read()\n</code></pre> <p>This code is added to the page using this code in text of the page:</p> <pre><code>{{ mymacro() }}\n</code></pre>"},{"location":"Extending_Mkdocs/#reference","title":"Reference","text":""},{"location":"Extending_Mkdocs/#global-events","title":"Global Events","text":"<p>https://www.mkdocs.org/dev-guide/plugins/</p> <p>Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Files/","title":"Files","text":"<ul> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> <li> <p>{{ no such element: mkdocs.structure.files.File object[\u2018path\u2019] }}</p> </li> </ul> <p>Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Generate_Random_Quotes/","title":"Generate Random Quotes.md","text":""},{"location":"Generate_Random_Quotes/#download-the-quotes-file","title":"Download the quotes file","text":"<p>File not found: /Users/stuartcw/Github/wiki.stuartlabs.com/includes/code/get_quotes.sh</p>"},{"location":"Generate_Random_Quotes/#simple-cgi-web-service","title":"Simple CGI web service","text":"<p>File not found: /Users/stuartcw/Github/wiki.stuartlabs.com/includes/code/quote_tree.py</p>"},{"location":"Generate_Random_Quotes/#sample-json-output","title":"Sample json output","text":"<pre><code>{\n    \"quotes\": [\n        \"This is always in turning the gate, you one who can write it. If you plant.\\n\\nJohn Locke\",\n        \"First say is one from them. That is how to him. When there quickly. Do not lazy. They must flow. To be defeated.\\n\\nBilly Wilder\",\n        \"A good plan is not as silence.\\n\\nDenis Waitley\",\n        \"Chaos is essential is a prisoner was so too. If you start living.\\n\\nRalph Emerson\",\n        \"Much wisdom to go on huge, dramatic change. If you do a process. We get back. Something makes the reward.\\n\\nSinvyest Tan\",\n        \"Natures delight.\\n\\nJean de la Fontaine\",\n        \"Faith in life is not a victor.\\n\\nNiccolo Machiavelli\",\n        \"Know that which is shaped.\\n\\nEdward Ericson\",\n        \"Formula for success is a great is what he aspires to himself. Therefore, all cases.\\n\\nWilliam Sloane Coffin\",\n        \"Liberty, taking a sign of most important than a sum up of rubber. All children all success. If we change. Some people are. Our greatness is mighty.\\n\\nThich Nhat Hanh\"\n    ]\n}\n</code></pre> <p>Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Install%20Requirements/","title":"Install Requirements","text":""},{"location":"Install%20Requirements/#requirements","title":"Requirements","text":"<p><pre><code>pip3 install pymdown-extensions\npip3 install mkdocs-macros-plugin\npip3 install mkdocs-simple-hooks\npip3 install mkdocs-material\n</code></pre> Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Keybase_API/","title":"Keybase Chat API","text":"<p>Some code which listens to all the messages that you receive and if they contain a certain string, repeats back the message. Each message that is heard is logged as JSON.</p> <p><pre><code>#!/bin/bash\n\nCHAT_NAME=\"test\"\nTEAM_NAME=\"your_team_name\"\n\nkeybase chat api-listen | while read L; do\n{\n    OUTPUT_FILENAME=`date '+%Y-%m-%d %H:%M:%S.json'`\n    echo $OUTPUT_FILENAME\n    echo $L | jq . &gt; \"$OUTPUT_FILENAME\"\n    OUT=$(jq --raw-output 'select(.type == \"chat\")|select(.msg.content.text.body|startswith(\"!stubot \"))| .msg.content.text.body | \"*\" + ltrimstr(\"!arnie \") + \"*\"' &lt;&lt;&lt; \"$L\")\n    if [ \"${OUT}\" != \"\" ]; then\n    {\n        echo \"OUT is ${OUT}\"\n        OUT=`echo ${OUT} | sed 's/!stubot//g'`\n        OUT=\"You said: ${OUT}\"\n        JSON='{ \"method\": \"send\", \"params\":  {\"options\": {\"channel\": {\"name\": \"'${TEAM_NAME}'\", \"members_type\": \"team\", \"topic_type\": \"chat\", \"topic_name\": \"'${CHAT_NAME}'\" } , \"message\": {\"body\":\"'${OUT}'\"} } } }'\n        echo $JSON &gt; json.txt\n        echo $JSON | keybase chat api\n    }; fi\n}; done\n</code></pre> Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Mkdocs/","title":"MkDocs","text":""},{"location":"Mkdocs/#why-i-decided-to-use-mkdocs-as-a-knowledge-repository","title":"Why I decided to use MkDocs as a knowledge repository.","text":"<p>Ye shall know them by their fruits. Matthew 7:16</p> <p>I came a across a web page A gardening guide for your mind  which mentioned the following:</p> <p>A gardening guide for your mind</p> <p>This is what a gardening guide for your mind would look like:</p> <ul> <li>Seeds. Seed your garden with quality content and cultivate your curiosity. Plant seeds in your mind garden by taking smart personal notes (taking raw notes is useless). These don\u2019t need to be written in a publishable form.</li> <li>Trees. Grow your knowledge by forming new branches and connecting the dots. Write short structured notes articulating specific ideas and publish them in your digital garden. One note in your digital garden = one idea. (what you\u2019re currently reading is such a note) Do not keep orphan notes. Thread your thoughts.</li> <li>Fruits. Produce new work. These are more substantial\u2014essays, videos, maybe a book at some point. The kind of work researchers and creatives may hope will help them live beyond their expiration date. Networked thinking can happen at many levels. A digital garden is a scalable way to transform seeds of information into original work and to go from collector to creator. </li> </ul> <p>This made me realise that I have a huge and fairly well managed collection of seeds. I have notes and bookmarks for almost every site I have visited. I have collection of quotations from every book I have read on the Kindle over the last few years.</p> <p>However I always felt that something was lacking.</p> <p>I do also have, scattered around Internet, many Trees. Most are written in chats with friends or groups of acquaintances and are mind dumps on a topic that I was inspired to write at the time.</p> <p>But, for all that work, I have no fruits of any consequence.</p> <p>Some well known content creators have successfully gathered their articles_trees_ into a book fruit or made a body of work, such as a collection of videos or pictures into a portfolio. Likewise the a collection of code into a project.</p> <p>All of these have the common feature that they gathered their research into a collective whole and published it. </p> <p>I have had the feeling that this was the way to go for a long time but the article was what convinced me of it,</p>"},{"location":"Mkdocs/#so-why-mkdocs","title":"So why MKDocs.","text":"<p>I did have blog of chronological links that I was publishing monthly but while the content was good it was a burden to do it monthly and also the method of retrieval wasn\u2019t useful for anyone. Nobody cares that I first found out about something last September, so a chronological blog doesn\u2019t fit the pattern that I want.</p>"},{"location":"Mkdocs/#i-want-something-more-like-a-wiki","title":"I want something more like a wiki.","text":"<p>The article above is published on a static site that based on TiddlyWiki. I like TiddlyWiki and it is extremely well done but after a couple of days I couldn\u2019t get the backend storage working on Github and on Node in a way that I wanted. I didn\u2019t want to the complexity of debugging a Node/JavaScript conversion to a static site.</p> <p>All I want is a wiki that is based on Markdown written in a language that I am 100% comfortable with and for me that is Python. </p> <p>I have found other ways of doing this and I\u2019m sure that I\u2019ll come back to those in future, if only to describe their good and bad points.</p> <p>While I will probably write it is a blog, I want the flexibility to revise the articles and just keep the most relevant one on the web.</p>"},{"location":"Mkdocs/#features","title":"Features","text":"<p>MKDocs has two features that I like. One I am yet to try.</p>"},{"location":"Mkdocs/#web-server","title":"Web Server","text":"<p>The first is that it serves the files with a mini web servers so you can work locally and see your site as you write. You could use it this way just to have a local information repository.</p>"},{"location":"Mkdocs/#save-to-github-pages","title":"Save to Github Pages","text":"<p>The second is that it renders contents as static HTML which you can scp up to your site or you can set it up to deploy to Github pages. I redirected my static site to be hosted via Github using a custom domain and now I can run the command</p> <p><code>mkdocs gh-deploy</code></p> <p>to deploy the site. This automatically commits to the <code>gh-pages</code> branch and publishes to the site.</p> <p>The Markdown files and any other files touched also need to be checked into Git on the <code>main</code> branch.</p>"},{"location":"Mkdocs/#wiki-format","title":"Wiki Format","text":"<p>One thing that made it more attractive to me was that there is a Wiki plugin which worked right away. This automatically makes a link to the page with the same title as the WikiLink so is an easy way to make a Wiki like site. Clicking on a broken wiki link will lead to the standard 404 page so it is not a Wiki in the true sense of the word.</p>"},{"location":"Mkdocs/#full-text-search","title":"Full Text Search","text":"<p>A feature that I wasn\u2019t expecting was full text search. I\u2019m not sure exactly this works but I think that during the HTML creation the pages are tokenised an index created that allows a Javascript on the page to display they results. I\u2019m not sure how this scales though.</p>"},{"location":"Mkdocs/#extendibility","title":"Extendibility","text":"<p>Looking at the api docs and the plugins documentation it seems that it is fully extensible in python and though I probably won\u2019t.</p> <p>You can extend MkDocs with code like:</p> <pre><code>import sys \nimport html\nimport os\n\nMARKDOWN_CODE=\"\\n`\"+\"`\"+\"`\\n\"\n\ndef define_env(env):\n    \"Hook function\"\n\n    @env.macro\n    def mymacro():\n      with open(\"main.py\") as this_python_file:\n          lines=\"\".join(this_python_file.readlines())\n\n      return \"You can extend MkDocs with code like:\\n\"+MARKDOWN_CODE+lines+MARKDOWN_CODE\n\n\n    @env.macro\n    def code_from_file(path: str, flavor: str = \"\"):\n        \"\"\"\n        Load code from a file and save as a preformatted code block.\n        If a flavor is specified, it's passed in as a hint for syntax highlighters.\n\n        Example usage in markdown:\n\n            {{code_from_file(\"code/myfile.py\", \"python\")}}\n\n        \"\"\"\n        docs_dir =\"includes\"\n        path = os.path.abspath(os.path.join(docs_dir, path))\n        if not os.path.exists(path):\n            return f\"\"\"&lt;b&gt;File not found: {path}&lt;/b&gt;\"\"\"\n        with open(path, \"r\") as f:\n            return (\n                #f\"\"\"&lt;pre&gt;&lt;code class=\"{flavor}\"&gt;{html.escape(f.read())}&lt;/code&gt;&lt;/pre&gt;\"\"\"\n                f\"```{flavor}\\n\"+f.read()+\"\\n```\"\n            )\n\n    @env.macro\n    def external_markdown(fn: str):\n        \"\"\"\n        Load markdown from files external to the mkdocs root path.\n        Example usage in markdown:\n\n            {{external_markdown(\"../../README.md\")}}\n\n        \"\"\"\n        docs_dir = env[\"project_dir\"]+\"/includes\"\n        fn = os.path.abspath(os.path.join(docs_dir, fn))\n        if not os.path.exists(fn):\n            return f\"\"\"&lt;b&gt;File not found: {fn}&lt;/b&gt;\"\"\"\n        with open(fn, \"r\") as f:\n            return f.read()\n</code></pre>"},{"location":"Mkdocs/#markdown-extensions","title":"Markdown Extensions","text":"<p>PyMdown Extensions Documentation has some nice extension to Markdown to add additional features to your editing. Such as critic to add crossing out and emoji to add emoji . </p> <p>Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Pretty_Maps/","title":"Pretty Maps","text":"<p>I came across this on September 1st 2021. Probably from Hacker News.</p> <p>As the title implies it allows you to make a pretty map of location from Open StreetMaps data. I\u2019m not sure how the colours work yet.</p> <p><pre><code>#!/usr/local/bin/python3\n\nimport pprint\nimport sys\n\npprint.pprint(sys.path)\n\nimport sys\nsys.path.append('../')\n\nimport vsketch\nfrom prettymaps import *\nimport matplotlib.font_manager as fm\nfrom matplotlib import pyplot as plt\n\npalette = ['#FFC857', '#E9724C', '#C5283D']\n\n\n# Init matplotlib figure\nfig, ax = plt.subplots(figsize = (12, 12), constrained_layout = True)\n\ndrawing_kwargs_celtic = {\n    #'background':   {'fc': 'palegreen', 'ec': 'white', 'hatch': 'ooo...', 'zorder': -1},\n    'perimeter':    {'ec': 'green', 'fill': False, 'lw': 0},\n    'park':         {'fc': 'darkgreen', 'ec': 'white', 'lw': 0, 'zorder': 1, 'hatch': 'ooo...'},\n    'grass':        {'fc': 'lawngreen', 'ec': 'white', 'lw': 0, 'zorder': 1, 'hatch': 'ooo...'},\n    'wetland':      {'fc': 'lightgreen', 'ec': 'white', 'lw': 0, 'zorder': 3, 'hatch': 'ooo...'},\n    'water':        {'fc': 'darkblue', 'ec': 'blue', 'lw': 0, 'zorder': 2, 'hatch': 'ooo...'},\n    'beach':        {'fc': 'orange', 'ec': 'white', 'lw': 0, 'zorder': 2, 'hatch': 'ooo...'},\n    'pedestrian':   {'fc': 'white', 'ec': 'white', 'lw': 0, 'zorder': 2, 'hatch': 'ooo...'},\n    'streets':      {'fc': 'darkgrey', 'ec': 'grey', 'zorder': 3, 'lw': 0, 'hatch': 'ooo...'},\n    'building':     {'fc': 'green', 'ec': 'white', 'lw': 0, 'zorder': 0},\n},\n\n\n\naddress='Kurihama Station',\naddress=\"nissan stadium, japan\"\naddress=\"Building #378180100\"\naddress=\"celtic park\"\naddress=\"mitsuzawa stadium\"\n\nbackup = plot(\n    # Address:\n    # 'Praca Ferreira do Amaral, Macau',\n    address,\n    # Plot geometries in a circle of radius:\n    radius = 1100,\n    # Matplotlib axis\n    ax = ax,\n    # Which OpenStreetMap layers to plot and their parameters:\n    layers = {\n            # Perimeter (in this case, a circle)\n            'perimeter': {},\n            # Streets and their widths\n            'streets': {\n                'width': {\n                    'motorway': 5,\n                    'trunk': 5,\n                    'primary': 4.5,\n                    'secondary': 4,\n                    'tertiary': 3.5,\n                    'residential': 3,\n                    'service': 2,\n                    'unclassified': 2,\n                    'pedestrian': 2,\n                    'footway': 1,\n                }\n            },\n            # Other layers:\n            #   Specify a name (for example, 'building') and which OpenStreetMap tags to fetch\n            'building': {'tags': {'building': True, 'landuse': 'construction'}, 'union': False},\n            'water': {'tags': {'natural': ['water', 'bay']}},\n            'green': {'tags': {'landuse': 'grass', 'natural': ['island', 'wood'], 'leisure': 'park'}},\n            'forest': {'tags': {'landuse': 'forest'}},\n            'parking': {'tags': {'amenity': 'parking', 'highway': 'pedestrian', 'man_made': 'pier'}}\n        },\n        # drawing_kwargs:\n        #   Reference a name previously defined in the 'layers' argument and specify matplotlib parameters to draw it\n        drawing_kwargs = {\n            'background': {'fc': '#F2F4CB', 'ec': '#dadbc1', 'hatch': 'ooo...', 'zorder': -1},\n            'perimeter': {'fc': '#F2F4CB', 'ec': '#dadbc1', 'lw': 0, 'hatch': 'ooo...',  'zorder': 0},\n            'green': {'fc': '#D0F1BF', 'ec': '#2F3737', 'lw': 1, 'zorder': 1},\n            'forest': {'fc': '#64B96A', 'ec': '#2F3737', 'lw': 1, 'zorder': 1},\n            'water': {'fc': '#a1e3ff', 'ec': '#2F3737', 'hatch': 'ooo...', 'hatch_c': '#85c9e6', 'lw': 1, 'zorder': 2},\n            'parking': {'fc': '#F2F4CB', 'ec': '#2F3737', 'lw': 1, 'zorder': 3},\n            'streets': {'fc': '#2F3737', 'ec': '#475657', 'alpha': 1, 'lw': 0, 'zorder': 3},\n            'building': {'palette': ['#FFC857', '#E9724C', '#C5283D'], 'ec': '#2F3737', 'lw': .5, 'zorder': 4},\n        }\n        #drawing_kwargs = {\n        #    'perimeter': {'fill': False, 'lw': 0, 'zorder': 0},\n        #    'park': {'fc': '#AABD8C', 'ec': '#87996b', 'lw': 1, 'zorder': 1},\n        #    'forest': {'fc': '#78A58D', 'ec': '#658a76', 'lw': 1, 'zorder': 1},\n        #    'garden': {'fc': '#a9d1a9', 'ec': '#8ab58a', 'lw': 1, 'zorder': 1},\n        #            'water': {'fc': '#92D5F2', 'ec': '#6da8c2', 'lw': 1, 'zorder': 2},\n        #     'streets': {'fc': '#F1E6D0', 'ec': '#2F3737', 'lw': 1.5, 'zorder': 3},\n        #     'building': {'palette': palette, 'ec': '#2F3737', 'lw': 1, 'zorder': 4},\n        # },\n\n)\n\nfig.savefig(address)\n</code></pre> Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Raspberry%20Pi%20Setup/","title":"Raspberry Pi Setup","text":""},{"location":"Raspberry%20Pi%20Setup/#todo","title":"Todo","text":"<ul> <li>Fix SD Card problem</li> <li>Hello world! from <code>on_page_markdown.py</code></li> </ul>"},{"location":"Test/","title":"Test","text":""},{"location":"Test/#this-is-a-test","title":"This is a test!","text":"<p>test!! 22:21 Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"Todo/","title":"Todo","text":"<ul> <li>Integrate mkdocs with Github Actions to rebuild the pages automatically when a page is checked in.</li> <li>Use some automation to add a :: indicator to new links. Hello world! from <code>on_page_markdown.py</code></li> </ul>"},{"location":"about/","title":"Rapit sapiente infelix tam","text":""},{"location":"about/#nabataeaque-veteres-troiaeque-humili-in-bracchia-feremus","title":"Nabataeaque veteres Troiaeque humili in bracchia feremus","text":"<p>Lorem markdownum caelatus intravit coacti: si Alexiroe, est ferro etiam, postquam manes. Ibat ardet ceciderat, euntes parari omnia plumbum et tamen, conveniunt una. Pulchra et lapis Herculeae parentis officium ergo, se aut terra caelum ripas.</p> <ol> <li>Paulatim tum per exiluit Lesbon rugae ita</li> <li>Tumulo tollens medullis</li> <li>Senemque Atalanta induruit</li> <li>Et sua corvum et aliud duris ponti</li> <li>Ceyx apta obvia concumbere qui quondam mecum</li> <li>Plumis ire</li> </ol> <p>Nece tantusque pedibus perimunt patiere pabula fugiuntque sex magnis convulsaque veniam ope corpore patientia. Videbat potitur Titania. Oscula tum; vota, urbis accipiter bracchia tuentibus illis, induco oblita Proserpina tela inpetus hactenus ripis!</p>"},{"location":"about/#exit-tibi-veteremque-niobe-clauserat-omni-lacunabant","title":"Exit tibi veteremque Niobe clauserat omni lacunabant","text":"<p>Agendo cupido deduci minus, ad posses non; sed aura corrumpere igitur Perseus caesariem ad. Pondere nimium murmura indeploratum imitantia est terrae Pergama, post ducunt.</p> <ol> <li>De vixque pelle quibus labens in tetigere</li> <li>Auctorem torus citharam</li> <li>Est damna loquar Othrys finitimi</li> <li>Adde mole benignior traxit Antandro parte nam</li> <li>Praestans coit</li> </ol> <p>Aliis rubet causam oras fidae semper mentis postquam mox pinna factum inque stagnata Elymumque laeso, et. Ut in aere mactatae se quod animas trahunt subterque coeptaeque praecipites, procorum. Postquam vulnus, non gurgite dant dari mirantis, quid cinctam deus Alcidamas genetrix.</p> <p>Acheloe Hecaten Teucri sentiet; quam studiumque in esse bono ensem certa discedite removit superosque hinc vosque crinem in. Exoratis exiguus, bubus manus tempore ait forma talia intrat circum! Cum maciem nare possit vero par quoque, est, magis causa aeternum nisi. Visa pallore accepta aliquando ad silvae dicere fistula credas tellus. Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"help/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>This is a [[Test.md]].</p>"},{"location":"help/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs help</code> - Print this help message.</li> </ul>"},{"location":"help/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>Hello world! from <code>on_page_markdown.py</code></p>"},{"location":"info/","title":"Info","text":""},{"location":"info/#macros-plugin-environment","title":"Macros Plugin Environment","text":""},{"location":"info/#general-list","title":"General List","text":"<p>All available variables and filters within the macros plugin:</p> Variable Type Content extra dict config MkDocsConfig {'config_file_path': '/Users/stuartcw/Github/wiki.stuartlabs.com/mkdocs.yml', 'site_name': \"Stuart's Brain\", 'nav': [{'Home': 'index.md'}, {'About': 'about.md'}, {'MkDocs Help': 'help.md'}, {'Info': 'info.md'}], 'pages': None, 'exclude_docs': None, 'not_in_nav': None, 'site_url': 'http://wiki.stuartlabs.com/', 'site_description': None, 'site_author': None, 'theme': Theme(name='material', dirs=['/usr/local/lib/python3.11/site-packages/material/templates', '/usr/local/lib/python3.11/site-packages/mkdocs/templates'], static_templates={'sitemap.xml', '404.html'}, name='material', locale=Locale('en'), language='en', direction=None, features=[], font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png'), 'docs_dir': '/Users/stuartcw/Github/wiki.stuartlabs.com/docs', 'site_dir': '/Users/stuartcw/Github/wiki.stuartlabs.com/site', 'copyright': None, 'google_analytics': None, 'dev_addr': _IpAddressValue(host='127.0.0.1', port=8000), 'use_directory_urls': True, 'repo_url': None, 'repo_name': None, 'edit_uri_template': None, 'edit_uri': None, 'extra_css': [], 'extra_javascript': [], 'extra_templates': [], 'markdown_extensions': ['toc', 'tables', 'fenced_code', 'pymdownx.highlight', 'pymdownx.superfences', 'smarty', 'sane_lists', 'wikilinks', 'admonition', 'pymdownx.critic', 'pymdownx.inlinehilite', 'pymdownx.emoji'], 'mdx_configs': {'toc': {'permalink': True}, 'pymdownx.emoji': {'emoji_generator': }}, 'strict': False, 'remote_branch': 'gh-pages', 'remote_name': 'origin', 'extra': {}, 'plugins': {'material/search': , 'macros': , 'mkdocs-simple-hooks': , 'rss': }, 'hooks': {}, 'watch': [], 'validation': {'nav': {'omitted_files': 20, 'not_found': 30, 'absolute_links': 20}, 'links': {'not_found': 30, 'absolute_links': 20, 'unrecognized_links': 20}}} environment dict system = 'MacOs', system_version = '13.6.1', python_version = '3.11.5', mkdocs_version = '1.5.3', macros_plugin_version = '1.0.5', jinja2_version = '3.1.2' plugin LegacyConfig {'module_name': 'main', 'modules': [], 'render_by_default': True, 'include_dir': '', 'include_yaml': [], 'j2_block_start_string': '', 'j2_block_end_string': '', 'j2_variable_start_string': '', 'j2_variable_end_string': '', 'on_undefined': 'keep', 'on_error_fail': False, 'verbose': False} git dict status = True, date [datetime], short_commit = '1fea295', commit = '1fea29545428419c26267e35e9806443bb8a1803', tag = '', short_tag = '', author = 'Stuart Woodward', author_email = 'stuart@87zero.com', committer = 'Stuart Woodward', committer_email = 'stuart@87zero.com', date_ISO = 'Sun Jan 7 22:44:06 2024 +0900', message = 'Changed test date again...', raw = 'commit 1fea29545428419c26267e35e9806443bb8a1803\\nAuthor: Stuart Woodward \\nDate:   Sun Jan 7 22:44:06 2024 +0900\\n\\n    Changed test date again...', root_dir = '/Users/stuartcw/Github/wiki.stuartlabs.com' macros SuperDict context [function], macros_info [function], now [function], fix_url [function], mymacro [function], code_from_file [function], external_markdown [function] filters dict pretty [function] filters_builtin dict abs [builtin_function_or_method], attr [function], batch [function], capitalize [function], center [function], count [builtin_function_or_method], d [function], default [function], dictsort [function], e [builtin_function_or_method], escape [builtin_function_or_method], filesizeformat [function], first [function], float [function], forceescape [function], format [function], groupby [function], indent [function], int [function], join [function], last [function], length [builtin_function_or_method], list [function], lower [function], items [function], map [function], min [function], max [function], pprint [function], random [function], reject [function], rejectattr [function], replace [function], reverse [function], round [function], safe [function], select [function], selectattr [function], slice [function], sort [function], string [builtin_function_or_method], striptags [function], sum [function], title [function], trim [function], truncate [function], unique [function], upper [function], urlencode [function], urlize [function], wordcount [function], wordwrap [function], xmlattr [function], tojson [function] navigation Navigation files Files page Page Page(title='Info', url='/info/')"},{"location":"info/#config-information","title":"Config Information","text":"<p>Standard MkDocs configuration information. Do not try to modify.</p> <p>e.g. <code>{{ config.docs_dir }}</code></p> <p>See also the MkDocs documentation on the config object.</p> Variable Type Content config_file_path str '/Users/stuartcw/Github/wiki.stuartlabs.com/mkdocs.yml' site_name str \"Stuart's Brain\" nav list [{'Home': 'index.md'}, {'About': 'about.md'}, {'MkDocs Help': 'help.md'}, {'Info': 'info.md'}] pages NoneType None exclude_docs NoneType None not_in_nav NoneType None site_url str 'http://wiki.stuartlabs.com/' site_description NoneType None site_author NoneType None theme Theme Theme(name='material', dirs=['/usr/local/lib/python3.11/site-packages/material/templates', '/usr/local/lib/python3.11/site-packages/mkdocs/templates'], static_templates={'sitemap.xml', '404.html'}, name='material', locale=Locale('en'), language='en', direction=None, features=[], font={'text': 'Roboto', 'code': 'Roboto Mono'}, icon=None, favicon='assets/images/favicon.png') docs_dir str '/Users/stuartcw/Github/wiki.stuartlabs.com/docs' site_dir str '/Users/stuartcw/Github/wiki.stuartlabs.com/site' copyright NoneType None google_analytics NoneType None dev_addr _IpAddressValue _IpAddressValue(host='127.0.0.1', port=8000) use_directory_urls bool True repo_url NoneType None repo_name NoneType None edit_uri_template NoneType None edit_uri NoneType None extra_css list [] extra_javascript list [] extra_templates list [] markdown_extensions list ['toc', 'tables', 'fenced_code', 'pymdownx.highlight', 'pymdownx.superfences', 'smarty', 'sane_lists', 'wikilinks', 'admonition', 'pymdownx.critic', 'pymdownx.inlinehilite', 'pymdownx.emoji'] mdx_configs dict toc [dict], pymdownx.emoji [dict] strict bool False remote_branch str 'gh-pages' remote_name str 'origin' extra LegacyConfig {} plugins PluginCollection material/search [SearchPlugin], macros [MacrosPlugin], mkdocs-simple-hooks [SimpleHooksPlugin], rss [GitRssPlugin] hooks dict watch list [] validation Validation {'nav': {'omitted_files': 20, 'not_found': 30, 'absolute_links': 20}, 'links': {'not_found': 30, 'absolute_links': 20, 'unrecognized_links': 20}}"},{"location":"info/#macros","title":"Macros","text":"<p>These macros have been defined programmatically for this environment (module or pluglets). </p> Variable Type Content {'context': .context at 0x1069bd800&gt;, 'macros_info': .macros_info at 0x1069bd9e0&gt;, 'now': .now at 0x1069bd8a0&gt;, 'fix_url': , 'mymacro': .mymacro at 0x1069bd940&gt;, 'code_from_file': .code_from_file at 0x1069bd580&gt;, 'external_markdown': .external_markdown at 0x1069bd260&gt;} SuperDict {'context': .context at 0x1069bd800&gt;, 'macros_info': .macros_info at 0x1069bd9e0&gt;, 'now': .now at 0x1069bd8a0&gt;, 'fix_url': , 'mymacro': .mymacro at 0x1069bd940&gt;, 'code_from_file': .code_from_file at 0x1069bd580&gt;, 'external_markdown': .external_markdown at 0x1069bd260&gt;}"},{"location":"info/#git-information","title":"Git Information","text":"<p>Information available on the last commit and the git repository containing the documentation project:</p> <p>e.g. <code>{{ git.message }}</code></p> Variable Type Content status bool True date datetime datetime.datetime(2024, 1, 7, 22, 44, 6, tzinfo=tzoffset(None, 32400)) short_commit str '1fea295' commit str '1fea29545428419c26267e35e9806443bb8a1803' tag str '' short_tag str '' author str 'Stuart Woodward' author_email str 'stuart@87zero.com' committer str 'Stuart Woodward' committer_email str 'stuart@87zero.com' date_ISO str 'Sun Jan 7 22:44:06 2024 +0900' message str 'Changed test date again...' raw str 'commit 1fea29545428419c26267e35e9806443bb8a1803\\nAuthor: Stuart Woodward \\nDate:   Sun Jan 7 22:44:06 2024 +0900\\n\\n    Changed test date again...' root_dir str '/Users/stuartcw/Github/wiki.stuartlabs.com'"},{"location":"info/#page-attributes","title":"Page Attributes","text":"<p>Provided by MkDocs. These attributes change for every page (the attributes shown are for this page).</p> <p>e.g. <code>{{ page.title }}</code></p> <p>See also the MkDocs documentation on the page object.</p> Variable Type Content file File page [Page], src_uri = 'info.md', name = 'info', dest_uri = 'info/index.html', url = 'info/', abs_src_path = '/Users/stuartcw/Github/wiki.stuartlabs.com/docs/info.md', abs_dest_path = '/Users/stuartcw/Github/wiki.stuartlabs.com/site/info/index.html', inclusion [InclusionLevel] title str 'Info' children NoneType None previous_page Page Page(title='MkDocs Help', url='/help/') next_page NoneType None _Page__active bool False update_date str '2024-01-07' canonical_url str 'http://wiki.stuartlabs.com/info/' abs_url str '/info/' edit_url NoneType None markdown str '{{ macros_info() }}\\n' _title_from_render NoneType None content NoneType None toc list [] meta dict <p>To have all titles of all pages, use:</p> <pre><code>{% for page in navigation.pages %}\n- {{ page.title }}\n{% endfor %}\n</code></pre>"},{"location":"info/#plugin-filters","title":"Plugin Filters","text":"<p>These filters are provided as a standard by the macros plugin.</p> Variable Type Content pretty function (var_list, rows, header, e) <p>Default mkdocs_macro Prettify a dictionary or object          (used for environment documentation, or debugging).</p>"},{"location":"info/#builtin-jinja2-filters","title":"Builtin Jinja2 Filters","text":"<p>These filters are provided by Jinja2 as a standard.</p> <p>See also the Jinja2 documentation on builtin filters).</p> Variable Type Content abs builtin_function_or_method <p>Return the absolute value of the argument.</p> attr function (environment, obj, name, value) <p>Get an attribute of an object.  <code>foo|attr(\"bar\")</code> works like     <code>foo.bar</code> just that always an attribute is returned and items are not     looked up.</p> batch function (value, linecount, fill_with, tmp, item) <p>A filter that batches items. It works pretty much like <code>slice</code>     just the other way round. It returns a list of lists with the     given number of items. If you provide a second parameter this     is used to fill up missing items. See this example.</p> capitalize function (s) <p>Capitalize a value. The first character will be uppercase, all others     lowercase.</p> center function (value, width) <p>Centers the value in a field of a given width.</p> count builtin_function_or_method <p>Return the number of items in a container.</p> d function (value, default_value, boolean) <p>If the value is undefined it will return the passed default value,     otherwise the value of the variable.</p> default function (value, default_value, boolean) <p>If the value is undefined it will return the passed default value,     otherwise the value of the variable.</p> dictsort function (value, case_sensitive, by, reverse, sort_func) <p>Sort a dict and yield (key, value) pairs. Python dicts may not     be in the order you want to display them in, so sort them first.</p> e builtin_function_or_method <p>Replace the characters <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>'</code>, and <code>\"</code> in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML.</p> escape builtin_function_or_method <p>Replace the characters <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>'</code>, and <code>\"</code> in the string with HTML-safe sequences. Use this if you need to display text that might contain such characters in HTML.</p> filesizeformat function (value, binary, bytes, base, prefixes, i, prefix, unit) <p>Format the value like a 'human-readable' file size (i.e. 13 kB,     4.1 MB, 102 Bytes, etc).  Per default decimal prefixes are used (Mega,     Giga, etc.), if the second parameter is set to <code>True</code> the binary     prefixes are used (Mebi, Gibi).</p> first function (args, kwargs, b) <p>Return the first item of a sequence.</p> float function (value, default) <p>Convert the value into a floating point number. If the     conversion doesn't work it will return <code>0.0</code>. You can     override this default using the first parameter.</p> forceescape function (value) <p>Enforce HTML escaping.  This will probably double escape variables.</p> format function (value, args, kwargs) <p>Apply the given values to a <code>printf-style</code>_ format string, like     <code>string % values</code>.</p> groupby function (args, kwargs, b) <p>Group a sequence of objects by an attribute using Python's     :func:<code>itertools.groupby</code>. The attribute can use dot notation for     nested access, like <code>\"address.city\"</code>. Unlike Python's <code>groupby</code>,     the values are sorted first so only one group is returned for each     unique value.</p> indent function (s, width, first, blank, newline, rv, lines) <p>Return a copy of the string with each line indented by 4 spaces. The     first line and blank lines are not indented by default.</p> int function (value, default, base) <p>Convert the value into an integer. If the     conversion doesn't work it will return <code>0</code>. You can     override this default using the first parameter. You     can also override the default base (10) in the second     parameter, which handles input with prefixes such as     0b, 0o and 0x for bases 2, 8 and 16 respectively.     The base is ignored for decimal numbers and non-string values.</p> join function (args, kwargs, b) <p>Return a string which is the concatenation of the strings in the     sequence. The separator between elements is an empty string per     default, you can define it with the optional parameter.</p> last function (environment, seq) <p>Return the last item of a sequence.</p> length builtin_function_or_method <p>Return the number of items in a container.</p> list function (args, kwargs, b) <p>Convert the value into a list.  If it was a string the returned list     will be a list of characters.</p> lower function (s) <p>Convert a value to lowercase.</p> items function (value) <p>Return an iterator over the <code>(key, value)</code> items of a mapping.</p> map function (args, kwargs, b) <p>Applies a filter on a sequence of objects or looks up an attribute.     This is useful when dealing with lists of objects but you are really     only interested in a certain value of it.</p> min function (environment, value, case_sensitive, attribute) <p>Return the smallest item from the sequence.</p> max function (environment, value, case_sensitive, attribute) <p>Return the largest item from the sequence.</p> pprint function (value) <p>Pretty print a variable. Useful for debugging.</p> random function (context, seq) <p>Return a random item from the sequence.</p> reject function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to each object,     and rejecting the objects with the test succeeding.</p> rejectattr function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to the specified     attribute of each object, and rejecting the objects with the test     succeeding.</p> replace function (eval_ctx, s, old, new, count) <p>Return a copy of the value with all occurrences of a substring     replaced with a new one. The first argument is the substring     that should be replaced, the second is the replacement string.     If the optional third argument <code>count</code> is given, only the first     <code>count</code> occurrences are replaced.</p> reverse function (value, rv, e) <p>Reverse the object or return an iterator that iterates over it the other     way round.</p> round function (value, precision, method, func) <p>Round the number to a given precision. The first     parameter specifies the precision (default is <code>0</code>), the     second the rounding method.</p> safe function (value) <p>Mark the value as safe which means that in an environment with automatic     escaping enabled this variable will not be escaped.</p> select function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to each object,     and only selecting the objects with the test succeeding.</p> selectattr function (args, kwargs, b) <p>Filters a sequence of objects by applying a test to the specified     attribute of each object, and only selecting the objects with the     test succeeding.</p> slice function (args, kwargs, b) <p>Slice an iterator and return a list of lists containing     those items. Useful if you want to create a div containing     three ul tags that represent columns.</p> sort function (environment, value, reverse, case_sensitive, attribute, key_func) <p>Sort an iterable using Python's :func:<code>sorted</code>.</p> string builtin_function_or_method <p>Convert an object to a string if it isn't already. This preserves a :class:<code>Markup</code> string rather than converting it back to a basic string, so it will still be marked as safe and won't be escaped again.</p> striptags function (value) <p>Strip SGML/XML tags and replace adjacent whitespace by one space.</p> sum function (args, kwargs, b) <p>Returns the sum of a sequence of numbers plus the value of parameter     'start' (which defaults to 0).  When the sequence is empty it returns     start.</p> title function (s) <p>Return a titlecased version of the value. I.e. words will start with     uppercase letters, all remaining characters are lowercase.</p> trim function (value, chars) <p>Strip leading and trailing characters, by default whitespace.</p> truncate function (env, s, length, killwords, end, leeway, result) <p>Return a truncated copy of the string. The length is specified     with the first parameter which defaults to <code>255</code>. If the second     parameter is <code>true</code> the filter will cut the text at length. Otherwise     it will discard the last word. If the text was in fact     truncated it will append an ellipsis sign (<code>\"...\"</code>). If you want a     different ellipsis sign than <code>\"...\"</code> you can specify it using the     third parameter. Strings that only exceed the length by the tolerance     margin given in the fourth parameter will not be truncated.</p> unique function (environment, value, case_sensitive, attribute, getter, seen, item, key) <p>Returns a list of unique items from the given iterable.</p> upper function (s) <p>Convert a value to uppercase.</p> urlencode function (value, items) <p>Quote data for use in a URL path or query using UTF-8.</p> urlize function (eval_ctx, value, trim_url_limit, nofollow, target, rel, extra_schemes, policies, rel_parts, scheme, rv) <p>Convert URLs in text into clickable links.</p> wordcount function (s) <p>Count the words in that string.</p> wordwrap function (environment, s, width, break_long_words, wrapstring, break_on_hyphens) <p>Wrap a string to the given width. Existing newlines are treated     as paragraphs to be wrapped separately.</p> xmlattr function (eval_ctx, d, autospace, rv) <p>Create an SGML/XML attribute string based on the items in a dict.     All values that are neither <code>none</code> nor <code>undefined</code> are automatically     escaped.</p> tojson function (eval_ctx, value, indent, policies, dumps, kwargs) <p>Serialize an object to a string of JSON, and mark it safe to     render in HTML. This filter is only for use in HTML documents.</p> <p>Hello world! from <code>on_page_markdown.py</code></p>"}]}